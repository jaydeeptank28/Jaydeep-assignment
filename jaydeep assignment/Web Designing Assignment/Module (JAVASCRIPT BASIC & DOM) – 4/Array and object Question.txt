# Write a JavaScript Program to display the current day and time in the following format. Sample Output: Today is Friday. Current Time is 12 PM: 12 : 22 2 ?
> function getCurrentDayAndTime() {
    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    const currentDate = new Date();
    const currentDay = daysOfWeek[currentDate.getDay()];
    const currentHour = currentDate.getHours();
    const currentMinute = currentDate.getMinutes();
    const period = currentHour >= 12 ? 'PM' : 'AM';
    const formattedHour = currentHour % 12 === 0 ? 12 : currentHour % 12;
    
    return `Today is ${currentDay}. Current Time is ${formattedHour} ${period}: ${currentMinute}`;
}

console.log(getCurrentDayAndTime());


 
# Write a JavaScript program to get the current date?
> function getCurrentDate() {
    const currentDate = new Date();
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    return currentDate.toLocaleDateString('en-US', options);
}

console.log(getCurrentDate());


 
# Write a JavaScript program to compare two objects?
> function compareObjects(obj1, obj2) {
    return JSON.stringify(obj1) === JSON.stringify(obj2);
}

const obj1 = { name: 'John', age: 30 };
const obj2 = { name: 'John', age: 30 };
const obj3 = { name: 'Jane', age: 25 };

console.log(compareObjects(obj1, obj2)); // Output: true
console.log(compareObjects(obj1, obj3)); // Output: false


 
# Write a JavaScript program to convert an array of objects into CSV string?
> function arrayToCSV(array) {
    const headers = Object.keys(array[0]);
    const csv = [headers.join(',')];
    
    array.forEach(obj => {
        const values = headers.map(header => obj[header]);
        csv.push(values.join(','));
    });
    
    return csv.join('\n');
}

const data = [
    { name: 'John', age: 30, city: 'New York' },
    { name: 'Jane', age: 25, city: 'Los Angeles' }
];

console.log(arrayToCSV(data));


 
# Write a JavaScript program to capitalize first letter of a string?
> function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

console.log(capitalizeFirstLetter('hello')); // Output: Hello
console.log(capitalizeFirstLetter('world')); // Output: World


 
# Write a JavaScript program to determine if a variable is array?
> function isArray(variable) {
    return Array.isArray(variable);
}

console.log(isArray([1, 2, 3])); // Output: true
console.log(isArray('hello'));   // Output: false


# Write a JavaScript program to clone an array?
> function cloneArray(array) {
    return array.slice(); // Using slice method to create a shallow copy of the array
}

const originalArray = [1, 2, 3, 4, 5];
const clonedArray = cloneArray(originalArray);
console.log(clonedArray); // Output: [1, 2, 3, 4, 5]


 
# What is the drawback of declaring methods directly in JavaScript objects?
> The drawback of declaring methods directly in JavaScript objects is that each object gets its own copy of the method, which consumes memory. This is inefficient, especially if there are many instances of the object.

 
# Print the length of the string on the browser console using console.log()?
> const string = "Hello, world!";
console.log(string.length); // Output: 13


 
# Change all the string characters to capital letters using toUpperCase() method?
> const string = "hello, world!";
const uppercaseString = string.toUpperCase();
console.log(uppercaseString); // Output: HELLO, WORLD!


 
# What is the drawback of declaring methods directly in JavaScript objects?
> The drawback of declaring methods directly in JavaScript objects is that each object gets its own copy of the method, which consumes memory. This is inefficient, especially if there are many instances of the object.

 
# Write a JavaScript program to get the current date. Expected Output : mm-dd-yyyy, mm/dd/yyyy or dd-mm-yyyy, dd/mm/yyyy?
> function getCurrentDate(format = 'mm-dd-yyyy') {
    const currentDate = new Date();
    const day = currentDate.getDate();
    const month = currentDate.getMonth() + 1;
    const year = currentDate.getFullYear();
    
    // Format the date based on the provided format
    switch (format) {
        case 'mm-dd-yyyy':
            return `${month}-${day}-${year}`;
        case 'mm/dd/yyyy':
            return `${month}/${day}/${year}`;
        case 'dd-mm-yyyy':
            return `${day}-${month}-${year}`;
        case 'dd/mm/yyyy':
            return `${day}/${month}/${year}`;
        default:
            return 'Invalid format';
    }
}

console.log(getCurrentDate('mm-dd-yyyy')); // Output: mm-dd-yyyy format
console.log(getCurrentDate('mm/dd/yyyy')); // Output: mm/dd/yyyy format
console.log(getCurrentDate('dd-mm-yyyy')); // Output: dd-mm-yyyy format
console.log(getCurrentDate('dd/mm/yyyy')); // Output: dd/mm/yyyy format


 
# Use indexOf to determine the position of the first occurrence of a in 30 Days Of JavaScript?
> const text = '30 Days Of JavaScript';
const position = text.indexOf('a');
console.log(position); // Output: 3


 
# Use lastIndexOf to determine the position of the last occurrence of a in 30 Days OfJavaScript?
> const text = '30 Days Of JavaScript';
const position = text.lastIndexOf('a');
console.log(position); // Output: 19


# Form Validtion in JS?
> Form validation in JavaScript involves checking user input to ensure that it meets certain criteria before the form is submitted. This can include checking for empty fields, validating email addresses, ensuring password strength, etc. You can perform form validation using JavaScript by attaching event listeners to form elements and validating the input data based on your requirements.


# Form in Email, number, Password, Validation?
> <form id="myForm">
    Email: <input type="email" id="email">
    <br>
    Number: <input type="number" id="number">
    <br>
    Password: <input type="password" id="password">
    <br>
    <button type="submit">Submit</button>
</form>

<script>
    const form = document.getElementById('myForm');
    form.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent form submission
        
        const email = document.getElementById('email').value;
        const number = document.getElementById('number').value;
        const password = document.getElementById('password').value;
        
        if (!email || !number || !password) {
            alert('All fields are required.');
            return;
        }
        
        if (!validateEmail(email)) {
            alert('Invalid email address.');
            return;
        }
        
        if (!validatePassword(password)) {
            alert('Password must be at least 6 characters long.');
            return;
        }
        
        alert('Form submitted successfully!');
    });

    function validateEmail(email) {
        const re = /\S+@\S+\.\S+/;
        return re.test(email);
    }

    function validatePassword(password) {
        return password.length >= 6;
    }
</script>



# Dynamic Form Validation in JS?
> Dynamic form validation in JavaScript involves validating form fields as the user interacts with them, providing real-time feedback on any validation errors. This can be achieved by attaching event listeners to form elements (e.g., input, change, blur events) and performing validation checks based on user input.


# how many type of JS Event? How to use it?
> There are many types of JavaScript events, including click, submit, change, keydown, keyup, mouseover, mouseout, etc. You can use these events by attaching event listeners to DOM elements using JavaScript


# What is Bom vs Dom in JS?
> BOM (Browser Object Model) refers to the objects provided by the web browser to interact with the browser window. This includes objects like window, navigator, screen, location, etc. DOM (Document Object Model) refers to the objects provided by the web browser to represent the structure of an HTML document. This includes objects like document, element, text, attribute, etc.


# Array vs object defences in JS? 
> In JavaScript, arrays are ordered collections of data, while objects are unordered collections of key-value pairs. Arrays use numeric indices to access elements, while objects use keys. Arrays are best suited for storing lists of similar items, while objects are best suited for storing collections of related data where each item has a unique identifier.



# Split the string into an array using split() Method?
> const str = 'Hello, world!';
const arr = str.split(', '); // Splitting the string by ', ' delimiter
console.log(arr); // Output: ['Hello', 'world!']



# Check if the string contains a word Script using includes() method?
> const str = '30 Days Of JavaScript';
const containsScript = str.includes('Script');
console.log(containsScript); // Output: true



# Change all the string characters to lowercase letters using toLowerCase() Method.
> const str = 'HELLO, WORLD!';
const lowercaseStr = str.toLowerCase();
console.log(lowercaseStr); // Output: 'hello, world!'



# What is Character at index 15 in ’30 Days of JavaScript’ string? Use charAt() method.
> const str = '30 Days of JavaScript';
const character = str.charAt(15);
console.log(character); // Output: 'S'

 

# copy to one string to another string in JS?
> const originalString = 'Hello, world!';
const copiedString = originalString;
console.log(copiedString); // Output: 'Hello, world!'



# Find the length of a string without using libraryFunction?
> const str = 'Hello, world!';
let length = 0;
for (let char of str) {
    length++;
}
console.log(length); // Output: 13D






 

 