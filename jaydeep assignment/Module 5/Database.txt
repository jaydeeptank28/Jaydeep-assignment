# What do you understand By Database
=> A database is an organized collection of structured information, or data,
   typically stored electronically in a computer system. A database is usually 
   controlled by a database management system (DBMS).


# What is Normalization?
=> Normalization is the process of organizing data in a database. It includes creating 
   tables and establishing relationships between those tables according to rules designed 
   both to protect the data and to make the database more flexible by eliminating redundancy
   and inconsistent dependency. 


# What is Difference between DBMS and RDBMS?
=> DBMS stands for Database Management System, and RDBMS is the acronym for the Relational 
   Database Management system. In DBMS, the data is stored as a file, whereas in RDBMS, data 
   is stored in the form of tables.


# What is MF Cod Rule of RDBMS Systems?
=> Codd's rule in DBMS also known as Codd's 12 rules/commandments is a set of thirteen rules 
   (numbered 0 to 12) that define a database to be a correct Relational Database Management 
   System (RDBMS). If a database follows Codd's 12 rules, it is called a True relational 
   database management system.


#  What do you understand By Data Redundancy?
=> Data redundancy occurs when the same piece of data exists in multiple places, whereas data 
   inconsistency is when the same data exists in different formats in multiple tables. Unfortunately,
   data redundancy can cause data inconsistency, which can provide a company with unreliable and/or 
   meaningless information.

# What is DDL Interpreter?
=> DDL Interpreter DDL expands to Data Definition Language. DDL Interpreter as the name suggests interprets
   the DDL statements such as schema definition statements like create, delete, etc. The result of this interpretation
   is a set of a table that contains the meta-data which is stored in the data dictionary.


#  What is DML Compiler in SQL?
=> A data manipulation language (DML) is a computer programming language used for adding (inserting), deleting, and modifying 
   (updating) data in a database. A DML is often a sublanguage of a broader database language such as SQL, with the DML comprising 
   some of the operators in the language.


#  What is SQL Key Constraints writing an Example of SQL Key Constraints
=> SQL constraints are used to specify rules for the data in a table. Constraints are used to limit the type of data that can go into 
   a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and 
   the data action, the action is aborted.


#  What is save Point? How to create a save Point write a Query?
=> A SAVEPOINT is a point in a transaction in which you can roll the transaction back to a certain point without rolling back the entire
   transaction. Syntax for Savepoint command: SAVEPOINT SAVEPOINT_NAME; This command is used only in the creation of SAVEPOINT among all
   the transactions.


#  What is trigger and how to create a Trigger in SQL?
=> A trigger is a special type of stored procedure that automatically runs when an event occurs in the database server. DML triggers run
   when a user tries to modify data through a data manipulation language (DML) event. DML events are INSERT, UPDATE, or DELETE statements 
   on a table or view.




#Task1
-------

CREATE TABLE student( RollNo int PRIMARY KEY AUTO_INCREMENT NOT NULL, Name varchar(30), Branch varchar(300) );

INSERT INTO `student` (`RollNo`, `Name`, `Branch`) VALUES
('1', 'Jay', 'Computer Science'),
(NULL, 'Suhani', 'Eletronic and com'),
(NULL, 'Kriti', 'Eletronic and Com');


CREATE TABLE Exam( RollNo int NOT NULL, FOREIGN KEY (RollNo) REFERENCES student(RollNo), S_code varchar(30), Marks Bigint(30), P_code varchar(30) );

INSERT INTO `exam` (`RollNo`, `S_code`, `Marks`, `P_code`) VALUES
('1', 'CS11', '50', 'CS'), ('1', 'CS12', '60', 'CS'),
('2', 'EC101', '66', 'EC'), ('2', 'EC102', '70', 'EC'),
('3', 'EC101', '45', 'EC'), ('3', 'EC102', '50', 'EC');


#Task2
-------

CREATE TABLE task2( FirstName varchar(30), LastName varchar(30), Address varchar(30), City varchar(30), Age bigint(3) );

INSERT INTO `task2` (`FirstName`, `LastName`, `Address`, `City`, `Age`) VALUES 
('Mickey', 'Mouse', '123 Fantasy Way', 'Anaheim', '73'),
('Bat  ', 'Man', '321 Caven Ave ', 'Gotham ', '54'), 
('Wonder ', 'Women', '987 Truth Way', 'Paradise', '39'),
('Donald ', 'Duck', '555 Quack Street ', 'Mallard', '65'), 
('Bugs ', 'Bunny', '567 Carrot Street ', 'Rascal', '58'),
('Wiley', 'Coyote', '999 Acme Way', 'Canyon', '61'), 
('Cat ', 'Woman', '234 Purfect Street', 'Hair Ball', '32'), 
('Tweety', 'Bird', '543', 'Itotltaw', '28');



#Task3
---------

CREATE TABLE Employee( Employee_id int(5), First_Name varchar(30), Last_Name varchar(30), Salary bigint (30), Joining_Date varchar(30), Department varchar(30) );



INSERT INTO `employee` (`Employee_id`, `First_Name`, `Last_Name`, `Salary`, `Joining_Date`, `Department`) VALUES 
('1', 'John', 'Abraham', '1000000', '01-JAN-13', 'Banking'), 
('2', 'Michael', 'Clarke', '800000', '01-JAN-13', 'Insurance'), 
('3', 'Roy', 'Thomas', '7000000', '01-FEB-13', 'Banking'), 
('4', 'Tom', 'Jose', '6000000', '01-FEB-13', 'Insurance'), 
('5', 'Jerry', 'Pinto', '6500000', '01-FEB-13','Insurance'), 
('6', 'Pjilip', 'Mathew', '7500000', '01-JAN-13','Services'), 
('7', 'Testname1', '123', '650000', '01-JAN-13','Services'), 
('8', 'Testname2', 'Lname%', '6000000', '01-FEB-13','Insurance');



CREATE TABLE Incentive( Employee_ref_id int (5), Incentive_Date varchar (30), Incentive_amount bigint (50) );



INSERT INTO `incentive` (`Employee_ref_id`, `Incentive_Date`, `Incentive_amount`) VALUES 
('1', '01-FEB-13', '5000'), 
('2', '01-FEB-13', '3000'), 
('3', '01-FEB-13', '4000'), 
('1', '01-JAN-13', '4500'), 
('2', '01-JAN-13', '3500');

A - SELECT First_Name FROM employee WHERE First_Name = 'Tom';
B - SELECT First_Name, Joining_Date, Salary FROM employee;
C - SELECT * FROM employee ORDER BY First_Name ASC, Salary DESC;	
D - SELECT * FROM employee WHERE First_Name LIKE '%J%';
E - SELECT Department, MAX(Salary) AS Max_Salary FROM employee GROUP BY Department ORDER BY Max_Salary DESC;





#Task4
-------

CREATE TABLE Salesperson( PKSNo int (5), SNAME Varchar (30), CITY Varchar (30), COMM bigint (5) );


INSERT INTO `salesperson` (`PKSNo`, `SNAME`, `CITY`, `COMM`) VALUES 
('1001', 'Peel', 'London', '.12'), 
('1002', 'Serres', 'San Jose', '.13'),
('1004', 'Motika', 'London', '.11'), 
('1007', 'Rafkin', 'Barcelona', '.15'), 
('1003', 'Axelrod', 'New York', '.1');



CREATE TABLE Customer( PKCNM int (5), CNAME Varchar (30), CITY Varchar (30), RATING bigint (5), FKSNO int (5) );


INSERT INTO `customer` (`PKCNM`, `CNAME`, `CITY`, `RATING`, `FKSNO`) VALUES 
('201', 'Hoffman', 'London', '100', '1001'), 
('202', 'Giovanne', 'Roe', '200', '1003'), 
('203', 'Liu', 'San Jose', '300', '1002'), 
('204', 'Grass', 'Barcelona', '100', '1002'), 
('206', 'Clemens', 'London', '300', '1007'), 
('207', 'Pereira', 'Roe', '100', '1004');




B - SELECT SNAME, City FROM salesperson WHERE City = 'London' AND COMM > 0.12;
C - SELECT * FROM salesperson WHERE City IN ('Barcelona', 'London');

E - SELECT * FROM customer WHERE Rating > 100 OR CITY = 'Roe';




































